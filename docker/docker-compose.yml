services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
    container_name: "elasticsearch"
    ports:
      - 9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    networks:
      - blogsphere_dev_net

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379
    networks:
      - blogsphere_dev_net

  redisisight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - 5540:5540
    depends_on:
      - redis
    networks:
      - blogsphere_dev_net
    volumes:
      - redisinsight:/data

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - blogsphere_dev_net

  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Web console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - blogsphere_dev_net

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.2
    container_name: kibana
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - blogsphere_dev_net

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: Jaeger
    ports:
      - "6831:6831/udp"   # Jaeger agent UDP
      - "6832:6832/udp"   # Jaeger agent UDP
      - "5778:5778"       # Agent HTTP (sampling config)
      - "16686:16686"     # Web UI
      - "14268:14268"     # Collector HTTP
      - "14250:14250"     # Collector gRPC
    networks:
      - blogsphere_dev_net
    environment:
      - COLLECTOR_OTLP_ENABLED=true   # enables OTLP (optional, for OpenTelemetry SDKs)


  zipkin:
    image: openzipkin/zipkin:latest
    container_name: blogspher.zipkin
    ports:
      - "9411:9411" # Zipkin Web UI
    networks:
      - blogsphere_dev_net

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: blogsphere-azurite
    ports:
      - "10000:10000" # Blob Storage
      - "10001:10001" # Queue Storage
      - "10002:10002" # Table Storage
    environment:
      - "AZURITE_ACCOUNTS=blogspherestrg:123e4567e89b12d3a456426614174000"
    volumes:
      - azurite_data:/data
    command: >
     azurite
      --location /data
      --loose
      --blobHost 0.0.0.0 --blobPort 10000
      --queueHost 0.0.0.0 --queuePort 10001
      --tableHost 0.0.0.0 --tablePort 10002
    restart: unless-stopped
    networks:
      - blogsphere_dev_net

  ## connection string for table storage
  ## DefaultEndpointsProtocol=http;AccountName=blogspherestrg;AccountKey=123e4567e89b12d3a456426614174000;TableEndpoint=http://127.0.0.1:10002/blogspherestrg;

  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - nginx-network

networks:
  blogsphere_dev_net:
    external: true
  nginx-network:
    driver: bridge

volumes:
  elasticsearch-data:
  redisinsight:
  minio_data:
  azurite_data:
